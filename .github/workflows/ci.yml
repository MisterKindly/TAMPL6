name: CI

on:
  [push, pull_request]

jobs:
  build_on_linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - cpp_comp: g++
            c_comp: gcc
            source: true
          - cpp_comp: clang++
            c_comp: clang
            source: false

    steps:
      - name: checking out repository
        uses: actions/checkout@v4

      - name: preparing build
        run: cmake -H. -B_build -D CMAKE_CXX_COMPILER=${{matrix.cpp_comp}} -D CMAKE_C_COMPILER=${{matrix.c_comp}} 
      - name: building
        run: cmake --build _build
      - name: checking programs output
        run: |
          echo "1 -5  6" | _build/solver_application/solver_app
          _build/hello_world_application/hello
      
      - name: Create Linux packages (DEB/RPM)
        if: startsWith(github.ref, 'refs/tags/v') && matrix.source == true
        run: |
          sudo apt-get install -y rpm
          cd _build
          cpack -G "DEB"
          cpack -G "RPM"
          mkdir -p artifacts
          mv *.deb *.rpm artifacts/
          
      - name: Upload Linux packages
        if: startsWith(github.ref, 'refs/tags/v') && matrix.source == true
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: _build/artifacts
          retention-days: 1

  build_on_windows:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - name: checking out repository
        uses: actions/checkout@v4

      - name: preparing build
        run: cmake . -B_build 
      - name: building
        run: cmake --build _build --config Release
      
      - name: Create Windows package (MSI)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd _build
          cpack -G "WIX"
          mkdir artifacts
          move *.msi artifacts
          
      - name: Upload Windows package
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: _build/artifacts
          retention-days: 1

  build_on_mac:
    runs-on: macos-latest
    strategy:
      fail-fast: false
    steps:
      - name: checking out repository
        uses: actions/checkout@v4

      - name: preparing build
        run: cmake -H. -B_build
      - name: building
        run: cmake --build _build
      
      - name: Create macOS package (DMG)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd _build
          cpack -G "DragNDrop"
          mkdir artifacts
          mv *.dmg artifacts
          
      - name: Upload macOS package
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: macos-package
          path: _build/artifacts
          retention-days: 1
    
  create_release:
    name: Create release
    needs: [build_on_linux, build_on_mac, build_on_windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest 
    steps:
      - name: checking out repository
        uses: actions/checkout@v4

      - name: Download Linux packages
        uses: actions/download-artifact@v4
        with:
          name: linux-packages
          path: release
          
      - name: Download macOS package
        uses: actions/download-artifact@v4
        with:
          name: macos-package
          path: release
          
      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: release
          
      - name: Generate ChangeLog
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          DATE=$(date -u +'%a %b %d %Y')
          echo "* $DATE $GITHUB_ACTOR <$GITHUB_ACTOR@users.noreply.github.com> $TAG_NAME" > release/CHANGELOG.md
          echo "- Automated release" >> release/CHANGELOG.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release with built packages"
          files: |
            release/**/*
          draft: false
          prerelease: false
